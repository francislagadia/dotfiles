# ------------------------------------------------------------------------------
# ZSH FUZZY UTILITIES (macOS)
#
# ðŸ§° PREREQUISITES (install via Homebrew):
#   - fzf
#   - fzf-tmux (bundled with fzf)
#   - git
#   - jq
#   - configcat-cli (npm install -g configcat-cli)
#   - diff-so-fancy
# ------------------------------------------------------------------------------

# g â€” Run `git` with args or default to `git status`
g() {
  [[ $# -gt 0 ]] && git "$@" || git status
}

# fbr â€” Fuzzy checkout Git branch (local + remote)
fbr() {
  local branches branch
  branches=$(git branch --all | grep -v 'HEAD')
  branch=$(echo "$branches" | fzf-tmux -d $((2 + $(wc -l <<< "$branches"))) +m)
  [[ -n "$branch" ]] && git checkout "$(sed 's/.* //' <<< "$branch" | sed 's#remotes/[^/]*/##')"
}

# glNoGraph â€” Git log without graph, for previews
alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an"'

# Helpers for preview and commit hash extraction
_gitLogLineToHash='echo {} | grep -o "[a-f0-9]\{7\}" | head -1'
_viewGitLogLine=''"$_gitLogLineToHash"' | xargs -I % sh -c "git show --color=always % | diff-so-fancy"'

# fcoc_preview â€” Fuzzy checkout commit with preview
fcoc_preview() {
  local commit
  commit=$(glNoGraph | fzf --no-sort --reverse --tiebreak=index --no-multi \
                            --ansi --preview="$_viewGitLogLine")
  [[ -n "$commit" ]] && git checkout "$(awk '{print $1}' <<< "$commit")"
}

# fshow_preview â€” View Git log with preview, Alt-Y copies hash
fshow_preview() {
  glNoGraph |
    fzf --no-sort --reverse --tiebreak=index --no-multi \
        --ansi --preview="$_viewGitLogLine" \
        --header="enter to view, alt-y to copy hash" \
        --bind "enter:execute:$_viewGitLogLine | less -R" \
        --bind "alt-y:execute:$_gitLogLineToHash | pbcopy"
}

# cc â€” Fuzzy search ConfigCat flags and fetch value
cc() {
  local flag settingId
  flag=$(configcat f ls --json | jq -r '.[].name' | fzf)
  settingId=$(configcat f ls --json | jq -r --arg name "$flag" '.[] | select(.name == $name) | .settingId')
  [[ -n "$settingId" ]] && configcat flag value sh --setting-id "$settingId"
}
